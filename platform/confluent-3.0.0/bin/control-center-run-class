#!/bin/bash
# (Copyright) [2016 - 2016] Confluent, Inc.

# Use shellcheck to lint this file

set -ue

base_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )

: "${CLASSPATH:=""}"
: "${CONTROL_CENTER_LOG4J_OPTS:=""}"
: "${CONTROL_CENTER_JMX_OPTS:=""}"
: "${CONTROL_CENTER_OPTS:=""}"
: "${CONTROL_CENTER_HEAP_OPTS:=""}"
: "${CONTROL_CENTER_JVM_PERFORMANCE_OPTS:=""}"
: "${JMX_PORT:=""}"
: "${JAVA_HOME:=""}"

# Development jars. `mvn package` should collect all the required dependency jars here
for dir in "$base_dir"/control-center/target/control-center-*-development; do
  C3_DIR="$dir/share/java/confluent-control-center"
  if [ -d "$C3_DIR" ]; then
    CLASSPATH="$CLASSPATH:$C3_DIR/*"
  fi
done

# Production jars
for library in "confluent-common" "rest-utils" "monitoring-interceptors" "confluent-control-center" "confluent-serializers"; do
  DIR="$base_dir/share/java/$library"
  if [ -d "$DIR" ]; then
    CLASSPATH="$CLASSPATH:$DIR/*"
  fi
done

# logj4 settings
if [ -z "$CONTROL_CENTER_LOG4J_OPTS" ]; then
  # Test for files from dev -> packages so this will work as expected in dev if you have packages
  # installed
  if [ -e "$base_dir/config/log4j.properties" ]; then # Dev environment
    CONTROL_CENTER_LOG4J_OPTS="-Dlog4j.configuration=file:$base_dir/config/log4j.properties"
  elif [ -e "$base_dir/etc/confluent-control-center/log4j.properties" ]; then # Simple zip file layout
    CONTROL_CENTER_LOG4J_OPTS="-Dlog4j.configuration=file:$base_dir/etc/confluent-control-center/log4j.properties"
  elif [ -e "/etc/confluent-control-center/log4j.properties" ]; then # Normal install layout
    CONTROL_CENTER_LOG4J_OPTS="-Dlog4j.configuration=file:/etc/confluent-control-center/log4j.properties"
  fi
fi

# JMX settings
if [ -z "$CONTROL_CENTER_JMX_OPTS" ]; then
  CONTROL_CENTER_JMX_OPTS="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false "
fi

# JMX port to use
if [ ! -z "$JMX_PORT" ]; then
  CONTROL_CENTER_JMX_OPTS="$CONTROL_CENTER_JMX_OPTS -Dcom.sun.management.jmxremote.port=$JMX_PORT "
fi

# Generic jvm settings you want to add
if [ -z "$CONTROL_CENTER_OPTS" ]; then
  CONTROL_CENTER_OPTS=""
fi

# Which java to use
if [ -z "$JAVA_HOME" ]; then
  JAVA="java"
else
  JAVA="$JAVA_HOME/bin/java"
fi

# Memory options
if [ -z "$CONTROL_CENTER_HEAP_OPTS" ]; then
  CONTROL_CENTER_HEAP_OPTS="-Xmx1g"
fi

# JVM performance options
if [ -z "$CONTROL_CENTER_JVM_PERFORMANCE_OPTS" ]; then
  CONTROL_CENTER_JVM_PERFORMANCE_OPTS="-server -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -Djava.awt.headless=true"
fi

usage() {
    echo "USAGE: $0 [-daemon] [opts] [-help]"
    exit 1
}

if [ $# -lt 1 ];
then
  usage
fi

MAIN="$1"
shift

DAEMON_MODE=""
HELP=""

while [ $# -gt 0 ]; do
  COMMAND="$1"
  case "$COMMAND" in
    -help)
      HELP="true"
      shift
      ;;
    -daemon)
      DAEMON_MODE="true"
      shift
      ;;
    *)
      break
      ;;
  esac
done

if [ "x$HELP" = "xtrue" ]; then
  usage
fi

OPTIONS=($CONTROL_CENTER_HEAP_OPTS)
OPTIONS+=($CONTROL_CENTER_JVM_PERFORMANCE_OPTS)
OPTIONS+=($CONTROL_CENTER_JMX_OPTS)
OPTIONS+=($CONTROL_CENTER_LOG4J_OPTS)
OPTIONS+=($CONTROL_CENTER_OPTS)

# Launch mode
if [ "x$DAEMON_MODE" = "xtrue" ]; then
  nohup "$JAVA" -cp "$CLASSPATH" "${OPTIONS[@]}" "$MAIN" "$@" 2>&1 < /dev/null &
else
  exec "$JAVA" -cp "$CLASSPATH" "${OPTIONS[@]}" "$MAIN" "$@"
fi
